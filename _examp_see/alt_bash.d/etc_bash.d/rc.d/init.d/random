#!/bin/sh
#
# random	Script to snapshot random state and reload it at boot time.
#
# Author:       Theodore Ts'o <tytso@mit.edu>
#
# chkconfig: 2345 15 85
# description: Saves and restores system entropy pool for higher quality \
#              random number generation.

WITHOUT_RC_COMPAT=1

# Source function library.
. /etc/init.d/functions

LOCKFILE=/var/lock/subsys/random
random_seed=/var/lib/random/random-seed
umask 077

# See how we were called.
case "$1" in
  start)
	# Carry a random seed from start-up to start-up
	# Load and then save 512 bytes, which is the size of the entropy pool
	if [ -s $random_seed ]; then
		action $"Loading random seed:" dd if=$random_seed of=/dev/urandom count=1 bs=512 2>/dev/null
	else
		touch $random_seed
	fi
	chmod 600 $random_seed
	action $"Initializing random number generator:" dd if=/dev/urandom of=$random_seed count=1 bs=512 2>/dev/null
	touch "$LOCKFILE"
	;;
  stop)
	# Carry a random seed from shut-down to start-up
	# Save 512 bytes, which is the size of the entropy pool
	touch $random_seed
	chmod 600 $random_seed
	action $"Saving random seed:" dd if=/dev/urandom of=$random_seed count=1 bs=512 2>/dev/null
	rm -f "$LOCKFILE"
	;;
  status)
	# this is way overkill, but at least we have some status output...
	if [ -c /dev/random ] ; then
		echo $"The random data source exists"
	else
		echo $"The random data source is missing"
	fi
	;;
  restart|reload)
	# do not do anything; this is unreasonable
	;;
  *)
	# do not advertise unreasonable commands that there is no reason
	# to use with this device
	msg_usage "${0##*/} {start|stop|status}"
	exit 1
esac

exit 0
