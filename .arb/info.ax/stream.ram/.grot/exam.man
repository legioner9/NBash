<!-- TOC tocDepth:2..3 chapterDepth:2..6 -->

- [Перенаправление потоков ошибок и вывода](#перенаправление-потоков-ошибок-и-вывода)
- [Все в одно](#все-в-одно)
- [Временное перенаправление вывода](#временное-перенаправление-вывода)
- [Постоянное перенаправление вывода exec](#постоянное-перенаправление-вывода-exec)
- [Постоянное перенаправление ввода в скриптах](#постоянное-перенаправление-ввода-в-скриптах)
- [Создание собственного перенаправления вывода](#создание-собственного-перенаправления-вывода)
- [Закрытие дескрипторов файлов](#закрытие-дескрипторов-файлов)
- [Получение сведений об открытых дескрипторах](#получение-сведений-об-открытых-дескрипторах)
- [input + cat](#input-cat)
- [input + read](#input-read)
- [save stdin](#save-stdin)
- [save stdout](#save-stdout)

<!-- /TOC -->
# Стандартные дескрипторы файлов

```
0, STDIN — стандартный поток ввода.
1, STDOUT — стандартный поток вывода.
2, STDERR — стандартный поток ошибок.
```

## Перенаправление потоков ошибок и вывода

     2> errorcontent 1> correctcontent

## Все в одно

    &>

## Временное перенаправление вывода
```sh
#!/bin/bash
echo "This is an error" >&2
echo "This is normal output"
```
## Постоянное перенаправление вывода exec

    exec 1>outfile
    echo "That output"
    cat outfile
        That output

## Постоянное перенаправление ввода в скриптах

in file: ${REPO_PATH}/NBash/.arb/info.ax/stream.ram/.grot/exa.d/save_input.d/exa_1.sh

```bash
#!/bin/bash
# 6 дескр сохр ссылку на 0 
exec 6<&0

exec 0<${REPO_PATH}/NBash/.arb/man/stream.ram/.grot/exa.d/exa_1.d/testfile
count=1
while read -r line; do
    echo "Line #$count: $line"
    count=$(($count + 1))
done

# возвращаем ссылку 6 на 0
exec 0<&6
exec 6>&-

```
## Создание собственного перенаправления вывода

    exec 3>myfile
    echo "This should display on the screen"
    echo "and this should be stored in the file" >&3
    echo "And this should be back on the screen"

## Закрытие дескрипторов файлов

Оболочка автоматически закрывает дескрипторы файлов после завершения работы скрипта. Однако, в некоторых случаях нужно закрывать дескрипторы вручную, до того, как скрипт закончит работу. Для того, чтобы закрыть дескриптор, его нужно перенаправить в &-. Выглядит это так:

    3>&-

    #!/bin/bash
    exec 3> myfile
    echo "This is a test line of data" >&3
    exec 3>&-
    echo "This won't work" >&3 # Bad file descriptor

## Получение сведений об открытых дескрипторах

Для того, чтобы получить список всех открытых в Linux дескрипторов, можно воспользоваться командой lsof. Во многих дистрибутивах, вроде Fedora, утилита lsof находится в /usr/sbin. Эта команда весьма полезна, так как она выводит сведения о каждом дескрипторе, открытом в системе. Сюда входит и то, что открыли процессы, выполняемые в фоне, и то, что открыто пользователями, вошедшими в систему.

У этой команды есть множество ключей, рассмотрим самые важные.

    -p Позволяет указать ID процесса.
    -d Позволяет указать номер дескриптора, о котором надо получить сведения.

Для того, чтобы узнать `PID` текущего процесса, можно использовать специальную переменную окружения `$$`, в которую оболочка записывает текущий `PID`.

Ключ `-a` используется для выполнения операции логического И над результатами, возвращёнными благодаря использованию двух других ключей:

    ${REPO_PATH}/NBash/.arb/info.ax/stream.ram/.grot/exa.d/exa_1.d/exa_1.sh:

    lsof -a -p $$ -d 0,1,2
```
      Output information may be incomplete.
COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
bash    13507   st    0u   CHR  136,0      0t0    3 /dev/pts/0
bash    13507   st    1u   CHR  136,0      0t0    3 /dev/pts/0
bash    13507   st    2u   CHR  136,0      0t0    3 /dev/pts/0
```

Тип файлов, связанных с `STDIN`, `STDOUT` и `STDERR` — CHR (character mode, символьный режим). Так как все они указывают на терминал, имя файла соответствует имени устройства, назначенного терминалу. Все три стандартных файла доступны и для чтения, и для записи.

Посмотрим на вызов команды `lsof` из скрипта, в котором открыты, в дополнение к стандартным, другие дескрипторы:

in file: ${REPO_PATH}/NBash/.arb/info.ax/stream.ram/.grot/exa.d/exa_2.d/exa_1.sh:

```sh
#!/bin/bash
exec 3> myfile1
exec 6> myfile2
exec 7< myfile3
lsof -a -p $$ -d 0,1,2,3,6,7
```

```
      Output information may be incomplete.
COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
bash    13507   st    0u   CHR  136,0      0t0       3 /dev/pts/0
bash    13507   st    1u   CHR  136,0      0t0       3 /dev/pts/0
bash    13507   st    2u   CHR  136,0      0t0       3 /dev/pts/0
bash    13507   st    3w   REG   0,37        0 9966761 /home/st/REPOBARE/_repo/NBash/.arb/info.ax/stream.ram/.grot/exa.d/exa_2.d/myfile1
bash    13507   st    6w   REG   0,37        0 9966798 /home/st/REPOBARE/_repo/NBash/.arb/info.ax/stream.ram/.grot/exa.d/exa_2.d/myfile2
bash    13507   st    7r   REG   0,37       18 9966797 /home/st/REPOBARE/_repo/NBash/.arb/info.ax/stream.ram/.grot/exa.d/exa_2.d/myfile3

```

## input + cat

```
# Redirect stdin to read from a file
exec <"$INPUT_FILE"

# Read the entire file as a single input
content=$(cat)
```

## input + read

```
exec 0<testfile
count=1
while read -r line; do
    echo "Line #$count: $line"
    count=$(($count + 1))
done
```

## save stdin

```
exec 6<&0
exec 0<testfile
...
exec 0<&6
```

## save stdout

in file ${REPO_PATH}/NBash/.arb/info.ax/stream.ram/.grot/exa.d/save_output.d/exa_1.sh
```
exec 5<&1
ecec 1>testfile
...
exec 1<&5
exec 5>&-
```
